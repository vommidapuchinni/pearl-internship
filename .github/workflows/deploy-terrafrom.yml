name: Deploy to Amazon EC2

on:
  push:
    branches:
      - main

env:
  EC2_INSTANCE_IP: ${{ secrets.SSH_HOST }}        # Use the secret for the EC2 instance IP or hostname
  EC2_USER: ubuntu                               # Set this to 'ubuntu' as your SSH username
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # Use the secret for the SSH private key
  DOCKER_IMAGE: chinni111/medusa                 # Replace with your Docker Hub image name
  DOCKER_IMAGE_TAG: latest                       # Set this to the image tag, e.g., latest
  COMPOSE_FILE_PATH: ./docker-compose.yml        # Set this to the path of your Docker Compose file

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Transfer Docker Compose file to EC2
        run: scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.COMPOSE_FILE_PATH }} ${{ env.EC2_USER }}@${{ env.EC2_INSTANCE_IP }}:/home/${{ env.EC2_USER }}/docker-compose.yml

      - name: Deploy to EC2 via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.EC2_USER }}@${{ env.EC2_INSTANCE_IP }} << EOF
            # Pull the latest Docker image from Docker Hub
            sudo docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }}

            # Stop existing containers if running, then run Docker Compose
            sudo docker-compose down || true
            sudo docker-compose up -d
          EOF
